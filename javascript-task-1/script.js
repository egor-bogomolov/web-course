"use strict";

/**
 * Во всех заданиях нужно дописать код, чтобы он заработал.
 * Для этого надо вместо всех многоточий написать что-нибудь правильное и убрать // в начале строк внутри функций.
 * То есть
 *
 * function fun() {
 * // var num = ...
 * }
 *
 * Должно превратиться, например, в
 *
 * function fun() {
 *     var num = 0;
 * }
 *
 * (вместо 0 может быть prompt и вообще что угодно корректное.
 * Читайте подсказки и переходите по ссылкам.
 * Пожалуйста, протестируйте то, что получилось.
 * И не стесняйтесь писать на почту, если у вас что-то не получается.
 */

/**
 * Задание 1:
 * Попросите пользователя ввести что-нибудь, а затем покажите ему сообщение "Ты ввёл: ...".
 * Не забудьте, что prompt принимает 2 аргумента: подсказку для пользователя и пример ввода.
 */
function readAndWrite() {
    // var input = prompt(...);
    // alert(...);
}

/**
 * Задание 2.1:
 * Теперь пользователь должен ввести число, а вы выведите его, скажем, умноженное на 13.
 * Не забудьте, что prompt возвращает не число, а строчку, а вам нужно именно число.
 */
function multiplyBy13() {
    // var input = prompt(...);
    // alert(...);
}

/**
 * Задание 2.2:
 * Пользователь снова должен ввести число, а вы выводите его в квадрате.
 */
function square() {
    // var number = ...;
    // alert(...);
}

/**
 * Задание 3.1:
 * Попросите пользователя ввести число, большее 100. Если он это сделал, то напишите, что он молодец.
 */
function bigNumber() {
    // var number = ...;
    // if (...) {
    //     ...
    // }
}

/**
 * Задание 3.2:
 * То же самое, что и раньше, но если пользователь не справился, то поругайте.
 */
function bigOrSmallNumber() {
    // var number = ...
    // if (...) {
    //     ...
    // } else {
    //     ...
    // }
}

/**
 * Задание 3.3:
 * То же самое, что и раньше, но ведь пользователь мог ввести и не число!
 * Если он это сделал, то сообщите ему об этом.
 * Подсказка: на занятии упоминалось, что при разнообразных некорректных операциях, в результате которых должно
 * получиться число (например, деление на 0 или попытка получить число из строчки, которая числом не является)
 * получается число NaN (not a number). Чтобы проверить, что число на самом деле NaN, есть функция isNaN(число),
 * которая принимает число и возвращает true или false.
 * Это должно ответить Андрею на вопрос о том, зачем нужны ифы. Например, чтобы проверять, что у нас не появилась
 * какая-то строчка там, где мы ожидали число.
 * https://www.w3schools.com/jsref/jsref_isnan.asp
 */
function bigNumberAndStringHandling() {
    // var number = ...
    // if (...) {
    //     ...
    // } else if (...) {
    //     ...
    // } else {
    //     ...
    // }
}

/**
 * Задание 3.4:
 * Теперь вы хотите добиться от пользователя ввода числа, чего бы вам это ни стоило. Для этого воспользуйтесь циклом
 * while, который повторяется, пока пользователь не введет число (смотрите про NaN в предыдущем задании).
 */
function bigNumberAndWhile() {
    // var number = ...
    // while(...) {
    //     number = ...
    // }
    // ...
}

/**
 * Задание 4.1:
 * Пользователь вводит слова через пробел, а вы показываете ему, сколько он слов ввёл.
 * Для этого у строчки есть функция split(разделяющий символ), которая возвращает массив (показывалась на занятии).
 * А у массива в свою очередь есть свойство length, которое хранит длину массива. По ссылкам можете увидеть примеры
 * использования:
 * https://www.w3schools.com/jsref/jsref_split.asp
 * https://www.w3schools.com/jsref/jsref_length_array.asp
 */
function countWords() {
    // var text = ...
    // alert(...);
}

var numbers;

/**
 * Задание 4.2:
 * Теперь пользователь вводит через пробел числа, а вы получаете из них массив. Для начала стоит преобразовать строчки
 * в массиве в числа и проверить, что все, что пользователь ввел через пробел собственно числами является.
 * Вспоминаем задания 3.3 и 3.4 и пользуемся циклом for для прохода по массиву. Если встретили не число, сообщите об
 * этом пользователю.
 */
function enterNumbers() {
    // numbers = ...
    // for (var i = 0; ...; i++) {
    //     numbers[i] = ...
    //     if (...) {
    //         ...
    //     }
    // }
}

/**
 * Задание 4.3 и 4.4:
 * Выведите весь массив.
 * Пользователь вводит номер элемента, который хочет увидеть, вы выводите этот элемент.
 */
function outputNumbers() {
    // alert(...);
}

function outputNumberById() {
    // var i = ...
    // alert(...);
}

/**
 * Задание 4.5 и 4.6:
 * Пользователь вводит число, добавьте его ко всем элементам массива.
 * Пользователь вводит число, поделите на него все элементы массива.
 * После этого выведите значения в массиве, чтобы убедиться, что они поменялись. Для этого можно вызвать функцию из
 * задания 4.3!
 */
function addToAllNumbers() {
    // var num = ...
    // for (...) {
    //     ...
    // }
    // outputNumbers();
}

function divideAllNumbers() {
    // var num = ...
    // for (...) {
    //     ...
    // }
    // ...
}

/**
 * Задание 4.7:
 * Посчитайте сумму чисел в массиве и выведите на экран.
 */
function sumOfNumbers() {
    // var sum = 0;
    // for (...) {
    //     sum += ...
    // }
    // alert(...);
}

/**
 * Для тех, кто все это сделал:
 * Напишите функции, которые будут определять число четных чисел в массиве, находить максимум, еще что-нибудь на ваше
 * усмотрение.
 */
